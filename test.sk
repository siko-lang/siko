module Std.Ops {

trait Clone[A] {
    fn clone(&self) -> A
}

trait Copy[A]

}

module Bool {
enum Bool {
    True,
    False,
}
}

module Main {

struct Bar {

}

instance Clone[Bar] {
    fn clone(&self) -> Bar {
        Bar()
    }
}

instance Copy[Bar]

struct Foo {
    b: Bar,

    fn boo(self) -> Self {
        self
    }
}

struct Quux {
    b : Bar,
}

fn id[A](a: A) -> A {
    a
}

fn main() {
    let mut f = Foo(Bar());
    if True {
        f.boo();
    } else {
        f.boo();
    }
    id(f.b);
}

}
