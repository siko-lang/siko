use std::{
    collections::{BTreeMap, BTreeSet},
    fmt::Display,
};

use crate::siko::{
    cfg::{
        Builder::Builder,
        CFG::{Key, CFG},
    },
    ir::Function::{BlockId, Function, InstructionId, InstructionKind},
};

use super::Path::Path;

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]
struct Value {
    name: String,
    block: BlockId,
}

impl Display for Value {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}/{}", self.name, self.block)
    }
}

#[derive(Clone, PartialEq, Eq)]
struct BorrowContext {
    liveValues: BTreeSet<Value>,
    deadValues: BTreeSet<Path>,
}

impl BorrowContext {
    pub fn new() -> BorrowContext {
        BorrowContext {
            liveValues: BTreeSet::new(),
            deadValues: BTreeSet::new(),
        }
    }

    pub fn merge(&mut self, other: BorrowContext) -> bool {
        let before = self.liveValues.len() + self.deadValues.len();
        self.liveValues.extend(other.liveValues);
        self.deadValues.extend(other.deadValues);
        let after = self.liveValues.len() + self.deadValues.len();
        before != after
    }
}

impl Display for BorrowContext {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "live: [")?;
        for (index, l) in self.liveValues.iter().enumerate() {
            if index == 0 {
                write!(f, "{}", l)?;
            } else {
                write!(f, ", {}", l)?;
            }
        }
        write!(f, "]")?;
        write!(f, "dead: [")?;
        for (index, l) in self.deadValues.iter().enumerate() {
            if index == 0 {
                write!(f, "{}", l)?;
            } else {
                write!(f, ", {}", l)?;
            }
        }
        write!(f, "]")?;
        Ok(())
    }
}

pub struct BorrowChecker<'a> {
    function: &'a Function,
}

impl<'a> BorrowChecker<'a> {
    pub fn new(function: &'a Function) -> BorrowChecker<'a> {
        BorrowChecker { function: function }
    }

    pub fn check(&mut self) {
        let mut ctx = BorrowContext::new();
        for param in &self.function.params {
            ctx.liveValues.insert(Value {
                name: param.getName(),
                block: BlockId::first(),
            });
        }
        self.interpretBlock(ctx, BlockId::first());
    }

    fn interpretBlock(&self, ctx: BorrowContext, id: BlockId) {
        let block = self.function.getBlockById(id);
        for (index, instruction) in block.instructions.iter().enumerate() {
            match &instruction.kind {
                InstructionKind::FunctionCall(qualified_name, vec) => todo!(),
                InstructionKind::DynamicFunctionCall(instruction_id, vec) => todo!(),
                InstructionKind::If(instruction_id, block_id, block_id1) => todo!(),
                InstructionKind::BlockRef(block_id) => todo!(),
                InstructionKind::Loop(_, instruction_id, block_id) => todo!(),
                InstructionKind::ValueRef(value, vec, _) => {
                    let mut isRef = false;
                    if block.instructions.len() > index + 1 {
                        let next = &block.instructions[index + 1];
                        if let InstructionKind::Ref(refArg) = &next.kind {
                            isRef = *refArg == instruction.id;
                        }
                    }
                }
                InstructionKind::Bind(_, instruction_id) => todo!(),
                InstructionKind::Tuple(vec) => todo!(),
                InstructionKind::TupleIndex(instruction_id, _) => todo!(),
                InstructionKind::StringLiteral(_) => todo!(),
                InstructionKind::IntegerLiteral(_) => todo!(),
                InstructionKind::CharLiteral(_) => todo!(),
                InstructionKind::Continue(instruction_id, instruction_id1) => todo!(),
                InstructionKind::Break(instruction_id, instruction_id1) => todo!(),
                InstructionKind::Return(instruction_id) => todo!(),
                InstructionKind::Ref(instruction_id) => todo!(),
                InstructionKind::Drop(vec) => todo!(),
            }
        }
    }
}
