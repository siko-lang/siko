module Net.TcpStream {

import Libc.FileDescriptor
import Libc.Socket
import Libc.String
import Libc.Errno
import Libc.Unistd
import Int.Util
import IO.Error
import IO.Buffer
import IO.Reader
import IO.Writer
import Net.SocketUtils
import Arch.SockaddrIn

pub struct TcpStream {
    sock: FileDescriptor,

    @safe
    pub fn connect(addr: &String) -> Result[TcpStream, Error] {
        let (ip, port) = try splitHostPort(addr);
        let sock = try createSocket(AF_INET, SOCK_STREAM);
        let sockAddrIn = SockaddrIn.new(AF_INET, port, 0.toU32());
        try parseAddress(ip, AF_INET, sockAddrIn.addrPtr());
        try connectSocket(sock, sockAddrIn);
        Ok(TcpStream(sock: FileDescriptor.new(sock)))
    }
}

pub instance TcpReader Reader[TcpStream] {
    fn read(&self, buffer: &WriteBuffer) -> Result[Int, Error] {
        self.sock.read(buffer)
    }
}

pub instance TcpWriter Writer[TcpStream] {
    fn write(&self, buffer: &ReadBuffer) -> Result[Int, Error] {
        self.sock.write(buffer)
    }
}

instance Drop[TcpStream] {
    fn drop(self) -> Self {
        self.sock.close();
        self
    }
}

}