module Libc.Fcntl {

import Libc.FileDescriptor
import Libc.String
import IO.Error
import Libc.Errno

fn open(path: *U8, flags: I32, ...) -> I32 = extern "C"

pub let O_RDONLY : I32 = 0x0.toI32();
pub let O_WRONLY : I32 = 0x1.toI32();
pub let O_RDWR   : I32 = 0x2.toI32();
pub let O_CREAT  : I32 = 0x200.toI32();
pub let O_TRUNC  : I32 = 0x400.toI32();
pub let O_APPEND : I32 = 0x8.toI32();

@safe
pub fn openFile(path: &String, flags: I32, mode: I32) -> Result[FileDescriptor, Error] {
    let cPath = CString.fromString(path.clone());
    let fd = open(cPath.asPtr(), flags, mode);
    if fd < 0.toI32() {
        let err = getErrno();
        return Err(Error.new(err.toInt()));
    }
    Ok(FileDescriptor(fd: fd))
}

}