module Libc.Socket {

import Array
import NativePtr
import Arch.SockaddrIn

pub fn htons(value: U16) -> U16 {
    ((value & 0xFF.toU16()) << 8.toU16()) | ((value >> 8.toU16()) & 0xFF.toU16())
}

@derive(Discriminator, Clone, Copy, PartialEq, Eq)
pub enum Domain {
    AF_UNSPEC,
    AF_UNIX,
    AF_INET,

    pub fn code(&self) -> I32 {
        self.discriminator().toI32()
    }
}

@derive(Discriminator, Clone, Copy, PartialEq, Eq)
pub enum SockType {
    Unused,
    SOCK_STREAM,
    SOCK_DGRAM,
    SOCK_RAW,

    pub fn code(&self) -> I32 {
        self.discriminator().toI32()
    }
}

pub struct InAddr {
    pub s_addr: U32,
}

pub fn socket(domain: I32, ty: I32, protocol: I32) -> I32 = extern "C"
pub fn bind(sockfd: I32, addr: *SockaddrIn, addrlen: U32) -> I32 = extern "C"
pub fn listen(sockfd: I32, backlog: I32) -> I32 = extern "C"
pub fn accept(sockfd: I32, addr: *U8, addrlen: *U32) -> I32 = extern "C"
pub fn inet_pton(af: I32, src: *U8, dst: *InAddr) -> I32 = extern "C"
pub fn connect(sockfd: I32, addr: *SockaddrIn, addrlen: U32) -> I32 = extern "C"

}
