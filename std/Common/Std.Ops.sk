module Std.Ops {

pub trait Add[T, U] {
    type Output
    fn add(self, other: U) -> Output
}

pub trait Sub[T, U] {
    type Output
    fn sub(self, other: U) -> Output
}

pub trait Mul[T, U] {
    type Output
    fn mul(self, other: U) -> Output
}

pub trait Div[T, U] {
    type Output
    fn div(self, other: U) -> Output
}

pub trait Not[T] {
    fn opNot(self) -> T
}

pub trait Neg[T] {
    fn negative(self) -> T
}

pub trait ShiftLeft[T, U] {
    type Output
    fn shiftLeft(self, other: U) -> Output
}

pub trait ShiftRight[T, U] {
    type Output
    fn shiftRight(self, other: U) -> Output
}

pub trait BitAnd[T, U] {
    type Output
    fn bitAnd(self, other: U) -> Output
}

pub trait BitOr[T, U] {
    type Output
    fn bitOr(self, other: U) -> Output
}

pub trait BitXor[T, U] {
    type Output
    fn bitXor(self, other: U) -> Output
}

pub trait Contain[T, U] {
    fn contains(&self, item: &U) -> Bool

    fn notContains(&self, item: &U) -> Bool {
        !self.contains(item)
    }
}

}