module IO.Buffer {

import Slice

pub struct ByteBuffer {
    data: Vec[U8],

    pub fn new(initialSize: Int = 0) -> ByteBuffer {
        let mut vec = Vec.new(initialSize);
        for i in  0..initialSize {
            vec.push(0.toU8());
        }
        ByteBuffer(vec)
    }

    @unsafe
    pub fn fromSlice(slice: Slice[U8]) -> ByteBuffer {
        ByteBuffer(Vec.fromSlice(slice))
    }

    pub fn fromVec(vec: Vec[U8]) -> ByteBuffer {
        ByteBuffer(vec)
    }

    @safe
    pub fn asWriteBuffer(&self) -> WriteBuffer {
        WriteBuffer(self.data.slice())
    }

    @safe
    pub fn asReadBuffer(&self) -> ReadBuffer {
        ReadBuffer(self.data.slice())
    }

    pub fn toVec(self, len: U64) -> Vec[U8] {
        self.data.truncate(len)
    }

    @unsafe
    pub fn asSlice(&self, len: U64) -> Slice[U8] {
        let mut s = self.data.slice();
        s.truncate(len);
        s
    }
}

pub struct WriteBuffer {
    data: Slice[U8],

    pub fn new(data: Slice[U8]) -> WriteBuffer {
        WriteBuffer(data)
    }
}

pub struct ReadBuffer {
    data: Slice[U8],

    pub fn new(data: Slice[U8]) -> ReadBuffer {
        ReadBuffer(data)
    }
}

}