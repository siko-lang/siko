module Std.Ops {

pub trait Add[T, U] {
    type Output
    fn add(self, other: U) -> Output
}

pub trait Sub[T, U] {
    fn sub(self, other: U) -> T
}

pub trait Mul[T, U] {
    fn mul(self, other: U) -> T
}

pub trait Div[T, U] {
    fn div(self, other: U) -> T
}

pub trait Not[T] {
    fn not(self) -> T
}

pub trait Neg[T] {
    fn negative(self) -> T
}

}