module Coroutine {

pub enum Result[Y, R] {
    Yielded(Y),
    Returned(R),
    Completed,
}

@safe
pub fn resume[Y, R](coro: co(Y) -> R) -> (co(Y) -> R,  Result[Y, R]) {
    return coResume(coro);
}

@safe
pub fn isCompleted[Y, R](coro: co(Y) -> R) -> Bool {
    return coIsCompleted(coro);
}

fn coResume[Y, R](coro: co(Y) -> R) -> (co(Y) -> R,  Result[Y, R]) = extern

fn coIsCompleted[Y, R](coro: co(Y) -> R) -> Bool = extern

}