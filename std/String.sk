module String {

import NativePtr

struct String {
    value: *U8,
    size: Int,
    capacity: Int,

    fn new() -> String {
        String(null(), 0, 0)
    }

    fn len(&self) -> Int {
        self.size
    }

    fn eq(&self, other: &String) -> Bool {
        if self.size != other.size {
            return False;
        }
        let result = NativePtr.memcmp(self.value, other.value, self.size);
        result == 0
    }

    fn clone(&self) -> String {
        if self.capacity == 0 {
            return String(self.value, self.size, self.capacity);
        } else {
            let newValue = allocateArray(self.capacity);
            NativePtr.memcpy(newValue, self.value, self.size);
            String(newValue, self.size, self.capacity)
        }
    }

    fn fromU8(value: Vec[U8]) -> String {
        let capacity = value.len();
        let newValue = allocateArray(capacity);
        NativePtr.memcpy(newValue, value.as_ptr(), capacity);
        String(newValue, capacity, capacity)
    }
}

instance Drop[String] {
    fn drop(mut self) -> Self {
        if self.capacity > 0 {
            NativePtr.deallocate(self.value);
        }
        self.capacity = 0;
        self.size = 0;
        self.value = null();
        self
    }
}

instance Add[String, String] {
    type Output = String
    fn add(self, other: String) -> String {
        self + &other
    }
}

instance Add[String, StringLiteral] {
    type Output = String
    fn add(self, other: StringLiteral) -> String {
        self + other.toString()
    }
}

instance Add[String, &String] {
    type Output = String
    fn add(self, other: &String) -> String {
        let newCapacity = self.size + other.size;
        let newValue = allocateArray(newCapacity);
        NativePtr.memcpy(newValue, self.value, self.size);
        NativePtr.memcpy(offset(newValue, self.size), other.value, other.size);
        if self.capacity > 0 {
            NativePtr.deallocate(self.value);
        }
        String(newValue, newCapacity, newCapacity)
    }
}

instance PartialEq[String] {
    fn eq(&self, other: &String) -> Bool {
        self.eq(other)
    }
}

instance Clone[String] {
    fn clone(&self) -> String {
        self.clone()
    }
}

instance Show[String] {
    fn show(&self) -> String {
        self.clone()
    }
}

struct StringLiteral {
    value: *U8,
    size: Int,

    fn new(value: *U8, size: Int) -> StringLiteral {
        StringLiteral(value, size)
    }

    fn len(&self) -> Int {
        self.size
    }

    fn clone(&self) -> StringLiteral {
        StringLiteral(self.value, self.size)
    }

    fn toString(&self) -> String {
        String(self.value, self.size, 0)
    }
}

instance Clone[StringLiteral] {
    fn clone(&self) -> StringLiteral {
        self.clone()
    }
}

instance PartialEq[StringLiteral] {
    fn eq(&self, other: &StringLiteral) -> Bool {
        self.toString().eq(&other.toString())
    }
}

instance ImplicitConvert[StringLiteral, String] {
    fn implicitConvert(self) -> String {
        self.toString()
    }
}

instance Copy[StringLiteral]

instance Add[StringLiteral, StringLiteral] {
    type Output = String
    fn add(self, other: StringLiteral) -> String {
        self.toString() + other.toString()
    }
}

instance Add[StringLiteral, &String] {
    type Output = String
    fn add(self, other: &String) -> String {
        self.toString() + other
    }
}

instance Add[StringLiteral, String] {
    type Output = String
    fn add(self, other: String) -> String {
        self.toString() + other
    }
}

instance Show[StringLiteral] {
    fn show(&self) -> String {
        self.toString()
    }
}

}
