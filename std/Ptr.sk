module Ptr {

import NativePtr as N

struct Ptr[T] {
    addr: *T

    fn null() -> Ptr[T] {
        Ptr(N.null())
    }

    fn isNull(&self) -> Bool {
        N.isNull(self.addr)
    }

    fn offset(&self, count: Int) -> Ptr[T] {
        Ptr(N.offset(self.addr, count))
    }

    fn store(&self, item: T) {
        N.store(self.addr, item)
    }

    fn load(&self) -> T {
        N.load(self.addr)
    }

    fn clone(&self) -> Ptr[T] {
        Ptr(N.clone(&self.addr))
    }

    fn allocateArray(count: Int) -> Ptr[T] {
        Ptr(N.allocateArray(count))
    }

    fn deallocate(&self) {
        N.deallocate(self.addr)
    }

    fn memcmp(&self, other: Ptr[T], count: Int) -> Int {
        N.memcmp(self.addr, other.addr, count)
    }

    fn memcpy(&self, other: Ptr[T], count: Int) {
        N.memcpy(self.addr, other.addr, count)
    }

    fn allocate() -> Ptr[T] {
        Ptr(N.allocateArray(1))
    }
}

instance[T] PartialEq[Ptr[T]] {
    fn eq(&self, other: &Ptr[T]) -> Bool {
       N.eq(self.addr, other.addr)
    }
}

instance[T] Eq[Ptr[T]] 

instance[T] Clone[Ptr[T]] {
    fn clone(&self) -> Ptr[T] {
        self.clone()
    }
}

instance[T] Deref[Ptr[T]] {
    type Target = T
    fn get(&self) -> T {
        self.load()
    }

    fn set(&self, value: T) {
        self.store(value)
    }

    fn release(&self) {
    }
}

}

module NativePtr {

fn eq[T](a: *T, b: *T) -> Bool = extern

fn null[T]() -> *T = extern

fn isNull[T](addr: *T) -> Bool = extern

fn allocateArray[T](count: Int) -> *T = extern

fn deallocate[T](addr: *T) = extern

fn memcpy[T](dest: *T, src: *T, count: Int) = extern

fn memcmp[T](dest: *T, src: *T, count: Int) -> Int = extern

fn offset[T](base: *T, count: Int) -> *T = extern

fn store[T](addr: *T, item: T) = extern

fn toRef[T](addr: *T) -> &T = extern

fn load[T](addr: *T) -> T = extern

fn print[T](addr: *T) = extern

fn clone[T](addr: &*T) -> *T = extern

}