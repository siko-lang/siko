module IO.Reader {

import IO.Error
import IO.Buffer

pub trait Reader[T] {
    fn read(&self, buffer: &WriteBuffer) -> Result[Int, Error]
}

// pub fn readAll[T: Reader[T]](reader: T) -> Result[ByteBuffer, Error] {
//     let buffer = ByteBuffer.new();
//     let mut writeBuffer = buffer.asWriteBuffer();
//     loop {
//         let bytesRead = reader.read(readBuffer);
//         if bytesRead == 0 {
//             break;
//         }
//         writeBuffer.data = writeBuffer.data.sliceFrom(bytesRead);
//     }
//     Ok(buffer)
// }

}