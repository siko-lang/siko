module Bool {

import Std.Ops

@derive(PartialEq, Eq, PartialOrd, Ord, Show)
pub enum Bool {
    False,
    True
}

pub impl BoolPartialEq PartialEq[Bool] {
    fn eq(&self, other: &Bool) -> Bool {
        match (self, other) {
            (True, True) -> True,
            (False, False) -> True,
            _ -> False,
        }
    }
}

pub impl BoolNot Not[Bool] {
    fn not(self) -> Bool {
        match self {
            True -> False,
            False -> True,
        }
    }
}

instance Clone[Bool] {
    fn clone(&self) -> Bool {
        match self {
            True -> True,
            False -> False,
        }
    }
}

instance Copy[Bool]

pub impl ShowBool Show[Bool] {
    fn show(&self) -> String {
        match self {
            True -> "True",
            False -> "False",
        }
    }
}

}