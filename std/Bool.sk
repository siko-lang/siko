module Bool {

import Std.Ops

@derive(PartialEq, Eq, PartialOrd, Ord, Show)
pub enum Bool {
    False,
    True
}

pub instance BoolNot Not[Bool] {
    fn opNot(self) -> Bool {
        match self {
            True -> False,
            False -> True,
        }
    }
}

pub instance BoolClone Clone[Bool] {
    fn clone(&self) -> Bool {
        match self {
            True -> True,
            False -> False,
        }
    }
}

pub instance CopyBool Copy[Bool]

pub instance ShowBool Show[Bool] {
    fn show(&self) -> String {
        match self {
            True -> "True",
            False -> "False",
        }
    }
}

}