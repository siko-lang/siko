module Bool {

@derive(PartialEq, Eq, PartialOrd, Ord, Show)
pub enum Bool {
    False,
    True
}

instance PartialEq[Bool] {
    fn eq(self, other: Bool) -> Bool {
        match (self, other) {
            (True, True) -> True,
            (False, False) -> True,
            _ -> False,
        }
    }
}

instance Not[Bool] {
    fn not(self) -> Bool {
        match self {
            True -> False,
            False -> True,
        }
    }
}

instance And[Bool] {
    fn opAnd(self, other: Bool) -> Bool {
        match (self, other) {
            (True, True) -> True,
            _ -> False,
        }
    }
}

instance Or[Bool] {
    fn opOr(self, other: Bool) -> Bool {
        match (self, other) {
            (False, False) -> False,
            _ -> True,
        }
    }
}

}