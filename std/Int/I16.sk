module I16 {

import Convert
import NativePtr
import Std.Ops

@builtin
pub struct I16 {
    pub fn add(self, other: I16) -> I16 = extern

    pub fn sub(self, other: I16) -> I16 = extern

    pub fn mul(self, other: I16) -> I16 = extern

    pub fn div(self, other: I16) -> I16 = extern

    pub fn eq(&self, other: &I16) -> Bool = extern

    pub fn lessThan(&self, other: &I16) -> Bool = extern

    @safe
    pub fn clone(&self) -> I16 {
        *toPtr(self)
    }
}

pub instance AddI16 Add[I16, I16] {
    type Output = I16
    fn add(self, other: I16) -> I16 {
        self.add(other)
    }
}

pub instance AddI16 Add[I16, &I16] {
    type Output = I16
    fn add(self, other: &I16) -> I16 {
        self.add(other)
    }
}

pub instance SubI16 Sub[I16] {
    fn sub(self, other: I16) -> I16 {
        self.sub(other)
    }
}

pub instance MulI16 Mul[I16, I16] {
    fn mul(self, other: I16) -> I16 {
        self.mul(other)
    }
}

pub instance DivI16 Div[I16, I16] {
    fn div(self, other: I16) -> I16 {
        self.div(other)
    }
}

pub instance PartialEqI16 PartialEq[I16] {
    fn eq(&self, other: &I16) -> Bool {
        self.eq(other)
    }
}

pub instance EqI16 Eq[I16]

pub instance PartialOrdI16 PartialOrd[I16] {
    fn partialCmp(&self, other: &I16) -> Option[Ordering] {
        if self.eq(other) {
            Some(Equal)
        } else {
            if self.lessThan(other) {
                Some(Less)
            } else {
                Some(Greater)
            }
        }
    }
}

pub instance OrdI16 Ord[I16] {
    fn cmp(&self, other: &I16) -> Ordering {
        if self.eq(other) {
            Equal
        } else {
            if self.lessThan(other) {
                Less
            } else {
                Greater
            }
        }
    }
}

pub instance CloneI16 Clone[I16] {
    fn clone(&self) -> I16 {
        self.clone()
    }
}

pub instance CopyI16 Copy[I16]

}