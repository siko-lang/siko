module Vec {

import NativePtr
import Slice

struct InnerVec[T] {
    items: *T,
    size: Int,
    capacity: Int

    fn new() -> InnerVec[T] {
        InnerVec(null(), 0, 0)
    }

    fn push(mut self, item: T) -> Self {
        if self.size == self.capacity {
            if self.capacity == 0 {
                self.grow(8);
            } else {
                self.grow(self.capacity * 2);
            }
        }
        let ptr = offset(self.items, self.size);
        *ptr = item;
        self.size += 1;
        self
    }

    fn get(&self, index: Int) -> &T {
        if self.size <= index {
            panic("OutOfBounds");
        }
        self.getUnchecked(index)
    }

    fn getUnchecked(&self, index: Int) -> &T {
        let ptr = offset(self.items, index);
        toRef(ptr)
    }

    pub fn remove(mut self, index: Int) -> Self {
        if index < 0 or index >= self.size {
            panic("OutOfBounds");
        }
        let ptr = offset(self.items, index);
        {
            let item = *ptr; // drop the item at the index
        }
        // shift the items to the left using memmove
        let nextPtr = offset(self.items, index + 1);
        let destPtr = offset(self.items, index);
        memmove(destPtr, nextPtr, (self.size - index - 1));
        self.size -= 1;
        self
    }

    fn grow(mut self, capacity: Int) -> Self {
        self.capacity = capacity;
        let newItems: *T = allocateArray(self.capacity);
        if self.size > 0 {
            memcpy(newItems, self.items, self.size);
        }
        deallocate(self.items);
        self.items = newItems;
        self
    }
}

pub struct Vec[T] {
    inner: InnerVec[T]

    pub fn new() -> Vec[T] {
        Vec(InnerVec.new())
    }

    pub fn push(mut self, item: T) -> Self {
        self.inner = self.inner.push(item); // TODO: mut self should apply to self.inner.push as well?!
        self
    }

    pub fn get(&self, index: Int) -> &T {
        self.inner.get(index)
    }

    pub fn getUnchecked(&self, index: Int) -> &T {
        self.inner.getUnchecked(index)
    }

    pub fn remove(mut self, index: Int) -> Self {
        self.inner = self.inner.remove(index); // TODO: mut self should apply to self.inner.remove as well?!
        self
    }

    pub fn iter(&self) -> VecIteratorRef[T] {
        VecIteratorRef(&self, 0)
    }

    pub fn intoIter(self) -> VecIterator[T] {
        VecIterator(self.inner, 0)
    }

    pub fn len(&self) -> Int {
        self.inner.size
    }

    pub fn empty(&self) -> Bool {
        self.inner.size == 0
    }

    pub fn slice(&self) -> Slice[T] {
        Slice.new(self.inner.items, self.inner.size)
    }

    pub fn swap(self, i: Int, j: Int) -> Self {
        self.slice().swap(i, j);
        self
    }

    pub fn reverse(self) -> Self {
        self.slice().reverse();
        self
    }

    pub fn sort[T: Ord[T]](mut self) -> Self {
        self.slice().sort();
        self
    }

    pub fn sort2[T: Ord[T]](mut self) -> Self {
        self.slice().sort();
        self
    }

    pub fn contains[T: PartialEq[T]](&self, item: &T) -> Bool {
        self.slice().contains(item)
    }

    pub fn asPtr(&self) -> *T {
        self.inner.items
    }
}

struct VecIterator[T] {
    inner: InnerVec[T],
    index: Int
}

instance[T] Drop[VecIterator[T]] {
    fn drop(mut self) -> Self {
        if self.inner.capacity == 0 {
            return self
        }
        loop {
            if self.index >= self.inner.size {
                break;
            }
            let ptr = offset(self.inner.items, self.index);
            self.index = self.index + 1;
            let item = *ptr;
        }
        deallocate(self.inner.items);
        self.inner.items = null();
        self
    }
}

instance[T] Iterator[VecIterator[T]] {
    type Item = T

    fn next(mut self) -> (Self, Option[T]) {
        if self.index >= self.inner.size {
            return (self, None)
        }
        let ptr = offset(self.inner.items, self.index);
        self.index = self.index + 1;
        let item = *ptr;
        (self, Some(item))
    }
}

instance[T] IntoIterator[Vec[T]] {
    type Item = T
    type Iter = VecIterator[T]

    fn intoIterator(self) -> VecIterator[T] {
        self.intoIter()
    }
}

struct VecIteratorRef[T] {
    vec: &Vec[T]
    index: Int
}

instance[T] Iterator[VecIteratorRef[T]] {
    type Item = &T

    fn next(mut self) -> (Self, Option[&T]) {
        if self.index >= self.vec.inner.size {
            return (self, None)
        }
        let item = self.vec.getUnchecked(self.index);
        self.index = self.index + 1;
        (self, Some(item))
    }
}

instance[T] Drop[Vec[T]] {
    fn drop(mut self) -> Self {
        {
            let iter = VecIterator(self.inner, 0);
            self.inner = InnerVec.new();
        }
        self
    }
}

instance[T: Show[T]] Show[Vec[T]] {
    fn show(&self) -> String {
        let mut result = String.new();
        result.push("[");
        let mut first = True;
        for item in self.iter() {
            if !first {
                result.push(", ");
            }
            first = False;
            result.push(item.show());
        }
        result.push("]");
        result
    }
}

instance[T: PartialEq[T]] PartialEq[Vec[T]] {
    fn eq(&self, other: &Vec[T]) -> Bool {
        if self.len() != other.len() {
            return False;
        }
        loop i = 0 {
            if i >= self.len() {
                break;
            }
            let a = self.getUnchecked(i);
            let b = other.getUnchecked(i);
            if a != b {
                return False;
            }
            i + 1
        }
        True
    }
}

instance[T: Clone[T]] Clone[Vec[T]] {
    fn clone(&self) -> Vec[T] {
        let mut newVec = Vec.new();
        newVec.inner = newVec.inner.grow(self.inner.capacity); // FIXME
        for item in self.iter() {
            newVec.push(item.clone());
        }
        newVec
    }
}

}