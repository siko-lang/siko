module Libc.Socket {

import Array

@derive(Discriminator, Clone, Copy, PartialEq, Eq)
pub enum Domain {
    AF_UNSPEC,
    AF_UNIX,
    AF_INET,
}

@derive(Discriminator, Clone, Copy, PartialEq, Eq)
pub enum SockType {
    Unused,
    SOCK_STREAM,
    SOCK_DGRAM,
    SOCK_RAW,
}

pub struct InAddr {
    pub s_addr: U32,
}

pub struct SockaddrIn {
    pub sin_len: U8,
    pub sin_family: U8,
    pub sin_port: U16,
    pub sin_addr: InAddr,
    pub sin_zero: Array[U8, 8],
}

// pub fn socket(domain: I32, ty: I32, protocol: I32) -> I32 = extern "C" ("sys/socket.h")
// pub fn bind(sockfd: I32, addr: *SockaddrIn, addrlen: U32) -> I32 = extern "C" ("sys/socket.h")
// pub fn inet_pton(af: I32, src: *U8, dst: *InAddr) -> I32 = extern "C" ("arpa/inet.h")
// pub fn connect(sockfd: I32, addr: *SockaddrIn, addrlen: U32) -> I32 = extern "C" ("sys/socket.h")
pub fn socket(domain: I32, ty: I32, protocol: I32) -> I32 = extern "C"
pub fn bind(sockfd: I32, addr: *SockaddrIn, addrlen: U32) -> I32 = extern "C"
pub fn inet_pton(af: I32, src: *U8, dst: *InAddr) -> I32 = extern "C"
pub fn connect(sockfd: I32, addr: *SockaddrIn, addrlen: U32) -> I32 = extern "C"

}
