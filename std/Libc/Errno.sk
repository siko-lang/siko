module Libc.Errno {

import Convert

@derive(Discriminator, FromInt, PartialEq, Eq, PartialOrd, Ord, Clone, Copy)
pub enum Errno {
    Ok,              // 0
    EPERM,           // 1
    ENOENT,          // 2
    ESRCH,           // 3
    EINTR,           // 4
    EIO,             // 5
    ENXIO,           // 6
    E2BIG,           // 7
    ENOEXEC,         // 8
    EBADF,           // 9
    ECHILD,          // 10
    EDEADLK,         // 11
    ENOMEM,          // 12
    EACCES,          // 13
    EFAULT,          // 14
    ENOTBLK,         // 15
    EBUSY,           // 16
    EEXIST,          // 17
    EXDEV,           // 18
    ENODEV,          // 19
    ENOTDIR,         // 20
    EISDIR,          // 21
    EINVAL,          // 22
    ENFILE,          // 23
    EMFILE,          // 24
    ENOTTY,          // 25
    ETXTBSY,         // 26
    EFBIG,           // 27
    ENOSPC,          // 28
    ESPIPE,          // 29
    EROFS,           // 30
    EMLINK,          // 31
    EPIPE,           // 32
    EDOM,            // 33
    ERANGE,          // 34
    EAGAIN,          // 35
    EINPROGRESS,     // 36
    EALREADY,        // 37
    ENOTSOCK,        // 38
    EDESTADDRREQ,    // 39
    EMSGSIZE,        // 40
    EPROTOTYPE,      // 41
    ENOPROTOOPT,     // 42
    EPROTONOSUPPORT, // 43
    ESOCKTNOSUPPORT, // 44
    ENOTSUP,         // 45
    EPFNOSUPPORT,    // 46
    EAFNOSUPPORT,    // 47
    EADDRINUSE,      // 48
    EADDRNOTAVAIL,   // 49
    ENETDOWN,        // 50
    ENETUNREACH,     // 51
    ENETRESET,       // 52
    ECONNABORTED,    // 53
    ECONNRESET,      // 54
    ENOBUFS,         // 55
    EISCONN,         // 56
    ENOTCONN,        // 57
    ESHUTDOWN,       // 58
    ETIMEDOUT,       // 59
    ECONNREFUSED,    // 60
    ELOOP,           // 61
    ENAMETOOLONG,    // 62
    EHOSTDOWN,       // 63
    EHOSTUNREACH,    // 64
    ENOTEMPTY,       // 65
    EPROCLIM,        // 66
    EUSERS,          // 67
    EDQUOT,          // 68
    ESTALE,          // 69
    EBADRPC,         // 70
    ERPCMISMATCH,    // 71
    EPROGUNAVAIL,    // 72
    EPROGMISMATCH,   // 73
    EPROCUNAVAIL,    // 74
    ENOLCK,          // 75
    ENOSYS,          // 76
    EFTYPE,          // 77
    EAUTH,           // 78
    ENEEDAUTH,       // 79
    EPWROFF,         // 80
    EDEVERR,         // 81
    EOVERFLOW,       // 82
    BADEXEC,         // 83
    EBADARCH,        // 84
    ESHLIBVERS,      // 85
    EBADMACHO,       // 86
    ECANCELED,       // 87
    EIDRM,           // 88
    ENOMSG,          // 89
    EILSEQ,          // 90
    ENOATTR,         // 91
    EBADMSG,         // 92
    EMULTIHOP,       // 93
    ENODATA,         // 94
    ENOLINK,         // 95
    ENOSR,           // 96
    ENOSTR,          // 97
    EPROTO,          // 98
    ETIME,           // 99
    EOPNOTSUPP,      // 100

    pub fn toInt(&self) -> Int {
        self.discriminator()
    }
}

fn __error() -> *I32 = extern "C" ("errno.h")

@safe
pub fn getErrno() -> Errno {
    let errPtr: *I32 = __error();
    let code: I32 = *errPtr;
    let errno: Option[Errno] = tryFrom(code.toInt());
    errno.unwrap()
}

}