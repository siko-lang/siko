module Iterator {

pub trait Iterator[T] {
    type Item
    fn next(self) -> (Self, Option[Item])
}

pub trait IntoIterator[T] {
    type Item
    type Iter: Iterator[Iter, Item=Item]

    fn intoIterator(self) -> Iter
}

pub instance[T, I: Iterator[T, Item=I]] IteratorIntoIterator IntoIterator[T] {
    type Item = I
    type Iter = T

    fn intoIterator(self) -> T {
        self
    }
}

}