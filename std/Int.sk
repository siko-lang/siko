module Int {

pub extern struct Int {
    pub fn add(self, other: Int) -> Int = extern

    pub fn sub(self, other: Int) -> Int = extern

    pub fn mul(self, other: Int) -> Int = extern

    pub fn div(self, other: Int) -> Int = extern

    pub fn mod(self, other: Int) -> Int = extern

    pub fn toU8(&self) -> U8 = extern

    pub fn eq(&self, other: &Int) -> Bool = extern

    pub fn lessThan(&self, other: &Int) -> Bool = extern

    pub fn clone(&self) -> Int = extern
}

instance Add[Int, Int] {
    type Output = Int
    fn add(self, other: Int) -> Int {
        self.add(other)
    }
}

instance Add[Int, &Int] {
    type Output = Int
    fn add(self, other: &Int) -> Int {
        self.add(other)
    }
}

instance Sub[Int] {
    fn sub(self, other: Int) -> Int {
        self.sub(other)
    }
}

instance Mul[Int] {
    fn mul(self, other: Int) -> Int {
        self.mul(other)
    }
}

instance Div[Int] {
    fn div(self, other: Int) -> Int {
        self.div(other)
    }
}

instance PartialEq[Int] {
    fn eq(&self, other: &Int) -> Bool {
        self.eq(other)
    }
}

instance PartialOrd[Int] {
    fn partialCmp(&self, other: &Int) -> Option[Ordering] {
        if self.eq(other) {
            Some(Equal)
        } else {
            if self.lessThan(other) {
                Some(Less)
            } else {
                Some(Greater)
            }
        }
    }
}

instance Ord[Int] {
    fn cmp(&self, other: &Int) -> Ordering {
        if self.eq(other) {
            Equal
        } else {
            if self.lessThan(other) {
                Less
            } else {
                Greater
            }
        }
    }
}

instance Clone[Int] {
    fn clone(&self) -> Int {
        self.clone()
    }
}

instance Neg[Int] {
    fn negative(self) -> Int {
        0 - self
    }
}

instance Show[Int] {
    fn show(&self) -> String {
        let mut n = self.clone();
        if n == 0 {
            return "0".toString();
        }

        let mut isNegative = False;

        if n < 0 {
            isNegative = True;
            n = -n;
        }

        let mut digits: Vec[U8] = Vec.new();

        while n > 0 {
            let value = n.mod(10) + 48;
            digits.push(value.toU8());
            n = n / 10;
        }

        if isNegative {
            digits.push(45.toU8());
        }

        digits.reverse();

        String.fromU8(digits)
    }
}

instance Copy[Int]

pub extern struct U8 {
    pub fn add(self, other: U8) -> U8 = extern
    
    pub fn sub(self, other: U8) -> U8 = extern

    pub fn mul(self, other: U8) -> U8 = extern

    pub fn div(self, other: U8) -> U8 = extern

    pub fn eq(&self, other: &U8) -> Bool = extern

    pub fn lessThan(&self, other: &U8) -> Bool = extern

    pub fn clone(&self) -> U8 = extern
}

instance Add[U8, U8] {
    type Output = U8
    fn add(self, other: U8) -> U8 {
        self.add(other)
    }
}

instance Sub[U8] {
    fn sub(self, other: U8) -> U8 {
        self.sub(other)
    }
}

instance Mul[U8] {
    fn mul(self, other: U8) -> U8 {
        self.mul(other)
    }
}

instance Div[U8] {
    fn div(self, other: U8) -> U8 {
        self.div(other)
    }
}

instance PartialEq[U8] {
    fn eq(&self, other: &U8) -> Bool {
        self.eq(other)
    }
}

instance PartialOrd[U8] {
    fn partialCmp(&self, other: &U8) -> Option[Ordering] {
        if self.eq(other) {
            Some(Equal)
        } else {
            if self.lessThan(other) {
                Some(Less)
            } else {
                Some(Greater)
            }
        }
    }
}

instance Clone[U8] {
    fn clone(&self) -> U8 {
        self.clone()
    }
}

instance Copy[U8]

pub extern struct I32 {
    pub fn add(self, other: I32) -> I32 = extern
    
    pub fn sub(self, other: I32) -> I32 = extern

    pub fn mul(self, other: I32) -> I32 = extern

    pub fn div(self, other: I32) -> I32 = extern

    pub fn eq(&self, other: &I32) -> Bool = extern

    pub fn lessThan(&self, other: &I32) -> Bool = extern

    pub fn clone(&self) -> I32 = extern
}

instance Add[I32, I32] {
    type Output = I32
    fn add(self, other: I32) -> I32 {
        self.add(other)
    }
}

instance Add[I32, &I32] {
    type Output = I32
    fn add(self, other: &I32) -> I32 {
        self.add(other)
    }
}

instance Sub[I32] {
    fn sub(self, other: I32) -> I32 {
        self.sub(other)
    }
}

instance Mul[I32] {
    fn mul(self, other: I32) -> I32 {
        self.mul(other)
    }
}

instance Div[I32] {
    fn div(self, other: I32) -> I32 {
        self.div(other)
    }
}

instance PartialEq[I32] {
    fn eq(&self, other: &I32) -> Bool {
        self.eq(other)
    }
}

instance PartialOrd[I32] {
    fn partialCmp(&self, other: &I32) -> Option[Ordering] {
        if self.eq(other) {
            Some(Equal)
        } else {
            if self.lessThan(other) {
                Some(Less)
            } else {
                Some(Greater)
            }
        }
    }
}

instance Clone[I32] {
    fn clone(&self) -> I32 {
        self.clone()
    }
}

instance Copy[I32]

}