module TcpStream {

import Libc.Socket
import Libc.Errno
import NativePtr
import Int.Util
import Array

fn htons(value: U16) -> U16 {
    ((value & 255.toU16()) << 8.toU16()) | ((value >> 8.toU16()) & 255.toU16())
}

pub struct Error {
    code: Int,
}

pub struct TcpStream {
    sock: I32,

    @safe
    pub fn connect(addr: &String) -> Result[TcpStream, Error] {
        let parts = addr.split(':');
        if parts.len() != 2 {
            return Err(Error( code: -1 ));
        }
        let ipPart = parts.get(0);
        let portPart = parts.get(1);
        let port = parseNum(portPart).unwrap();
        let sock = try createSocket(AF_INET, SOCK_STREAM);
        let sockAddrPtr: *Libc.Socket.SockaddrIn = null();
        let sinLen = sizeOf(sockAddrPtr);
        let sinFamily = (AF_INET).discriminator().toU8();
        let sinPort = htons(port.toU16());
        let mut addrCStr = ipPart.toVecU8();
        addrCStr.push(0.toU8());
        let socketAddrIn = SockaddrIn(
            sin_len: sinLen.toU8(),
            sin_family: sinFamily,
            sin_port: sinPort,
            sin_addr: Libc.Socket.InAddr(s_addr: 0.toU32()),
            sin_zero: Array.uninitialized(),
        );
        socketAddrIn.sin_zero.fill(0.toU8());
        let addrPtr: *Libc.Socket.InAddr = NativePtr.toPtr(&socketAddrIn.sin_addr);
        let res = inet_pton((AF_INET).discriminator().toI32(), addrCStr.slice().asPtr(), addrPtr);
        if res <= 0.toI32() {
            let err = getErrno();
            return Err(Error( code: err.toInt() ));
        }
        let res = Libc.Socket.connect(sock, NativePtr.toPtr(&socketAddrIn), sinLen.toU32());
        if res < 0.toI32() {
            let err = getErrno();
            return Err(Error( code: err.toInt() ));
        }
        return Ok(TcpStream(sock: sock));
    }

    @unsafe
    fn createSocket(domain: Domain, ty: SockType) -> Result[I32, Error] {
        let sock = Libc.Socket.socket(domain.discriminator().toI32(), ty.discriminator().toI32(), 0.toI32());
        if sock < 0.toI32() {
            let err = getErrno();
            println("Err ${err.toInt()}");
            return Err(Error( code: err.toInt() ));
        }
        Ok(sock)
    }
}

}