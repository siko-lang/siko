module Main {

import Libc.Errno
import Libc.Unistd
import Convert
import NativePtr
import Array

import Net.TcpStream

@unsafe
pub fn main() {
    let tcpStream = connect("127.0.0.1:8080").unwrap();
    loop {
        print("Enter message: ");
        let line = readLine();
        let msg = line + "\\n";
        let bytes = msg.slice();
        let sent = Libc.Unistd.write(tcpStream.sock.getFd(), bytes.asPtr(), bytes.len());
        if sent < 0 {
            let err = getErrno();
            println("write failed: ${err.toInt()}");
            break;
        }
        let mut buf: Array[U8, 1024] = Array.uninitialized();
        let received = Libc.Unistd.read(tcpStream.sock.getFd(), buf.slice().asPtr(), buf.len().toU64());
        if received < 0 {
            let err = getErrno();
            println("read failed: ${err.toInt()}");
            break;
        } else if received == 0 {
            println("Server closed connection");
            break;
        }
        let response = String.fromU8(buf.slice().subSlice(0.toU64(), received.toU64()));
        print("Received: ${response}");
    }
}

}