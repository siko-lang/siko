module Main {

import IO.Error
import IO.Buffer
import IO.Writer
import IO.Reader

import Net.TcpStream

fn sendString(tcpStream: &TcpStream, msg: String) -> Result[Int, Error] {
    let buffer = ByteBuffer.fromVec(msg.toVecU8());
    tcpStream.write(buffer.asReadBuffer())
}

fn readString(tcpStream: &TcpStream) -> Result[Option[String], Error] {
    let inputBuffer = ByteBuffer.new(1024);
    let received = try tcpStream.read(inputBuffer.asWriteBuffer());
    if received == 0 {
        return Ok(None);
    }
    Ok(Some(String.fromVecU8(inputBuffer.toVec())))
}

fn loopFn(tcpStream: &TcpStream) -> Result[(), Error] {
    print("Enter message: ");
    let line = readLine();
    let msg = line + "\n";
    try sendString(tcpStream, msg);
    let inputBuffer = ByteBuffer.new(1024);
    let response = try readString(tcpStream);
    let response = match response {
        None -> {
            println("Connection closed by peer");
            return Err(Error.new(0));
        }
        Some(r) -> r
    };
    print("Received: ${response}");
    Ok(())
}

pub fn main() {
    let tcpStream = connect("127.0.0.1:8080").expect("Failed to connect");
    loop {
        let result = loopFn(tcpStream);
        match result {
            Ok(()) -> {}
            Err(e) -> {
                println("Error: ${e}");
                break;
            }
        }
    }
}

}