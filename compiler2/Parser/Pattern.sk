module Siko.Parser.Pattern {

import Siko.Location
import Siko.Parser.Parser
import Siko.Parser.Token
import Siko.Syntax.Pattern

pub trait PatternParser[T] {
    fn buildPattern(self, p: SimplePattern) -> (Self, Pattern)
    fn parsePattern(self) -> (Self, Pattern)
}

instance PatternParser[Parser] {
    fn buildPattern(mut self, p: SimplePattern) -> (Self, Pattern) {
        let pattern = Pattern(
            pattern: p,
            location: self.popSpan(),
        );
        (self, pattern)
    }

    fn parsePattern(mut self) -> (Self, Pattern) {
        self.pushSpan();
        let pattern = match self.peek() {
            TokenKind.Keyword(KeywordKind.Mut) -> {
                self.expect(TokenKind.Keyword(KeywordKind.Mut));
                let name = self.parseVarIdentifier();
                self.buildPattern(SimplePattern.Bind(name, True))
            }
            TokenKind.VarIdentifier -> {
                let name = self.parseVarIdentifier();
                self.buildPattern(SimplePattern.Bind(name, False))
            }
            TokenKind.TypeIdentifier -> {
                let name = self.parseQualifiedTypeName();
                let mut args = Vec.new();
                if self.check(TokenKind.LeftBracket(BracketKind.Paren)) {
                    self.expect(TokenKind.LeftBracket(BracketKind.Paren));
                    while !self.check(TokenKind.RightBracket(BracketKind.Paren)) {
                        let arg = self.parsePattern();
                        args.push(arg);
                        if self.check(TokenKind.RightBracket(BracketKind.Paren)) {
                            break;
                        }
                        self.expect(TokenKind.Misc(MiscKind.Comma));
                    }
                    self.expect(TokenKind.RightBracket(BracketKind.Paren));
                }
                self.buildPattern(SimplePattern.Named(name, args))
            }
            TokenKind.LeftBracket(BracketKind.Paren) -> {
                let mut args = Vec.new();
                if self.check(TokenKind.LeftBracket(BracketKind.Paren)) {
                    self.expect(TokenKind.LeftBracket(BracketKind.Paren));
                    while !self.check(TokenKind.RightBracket(BracketKind.Paren)) {
                        let arg = self.parsePattern();
                        args.push(arg);
                        if self.check(TokenKind.RightBracket(BracketKind.Paren)) {
                            break;
                        }
                        self.expect(TokenKind.Misc(MiscKind.Comma));
                    }
                    self.expect(TokenKind.RightBracket(BracketKind.Paren));
                }
                self.buildPattern(SimplePattern.Tuple(args))
            }
            TokenKind.Misc(MiscKind.Wildcard) -> {
                self.expect(TokenKind.Misc(MiscKind.Wildcard));
                self.buildPattern(SimplePattern.Wildcard)
            }
            TokenKind.IntegerLiteral -> {
                let literal = self.parseIntegerLiteral();
                self.buildPattern(SimplePattern.IntegerLiteral(literal))
            }
            TokenKind.CharLiteral -> {
                let literal = self.parseCharLiteral();
                self.buildPattern(SimplePattern.IntegerLiteral(literal))
            }
            TokenKind.StringLiteral -> {
                let literal = self.parseStringLiteral();
                self.buildPattern(SimplePattern.StringLiteral(literal))
            }
            kind -> self.reportError2("<pattern>", kind),
        };
        (self, pattern)
    }
}

}