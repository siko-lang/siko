module Main {

enum MyOption[T] {
    Some(T),
    None,
}

enum MyOrder {
    Equal,
    Less,
    Greater
}

fn sink[T](x: T) {
}

fn main() {
    match Some(Equal) {
        Some(Equal) -> Some(Equal),
        other -> other,
    };
    match Some(Equal) {
        Some(x) -> {
            sink(x);
            Some(Equal)
        }
        other -> other,
    };
}

}