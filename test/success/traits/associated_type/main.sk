module Main {

struct Container[T] {
    item: T
}

trait Bar[T] {
    type Output
    fn bar(self) -> Output
}

fn generic[T, R: Bar[Container[T], Output=R]](c: Container[T]) -> R {
    c.bar()
}

struct Foo {

}

instance Bar[Container[Foo]] {
    type Output = Int

    fn bar(self) -> Int {
        5
    }
}

fn main() {
    let c = Container(Foo());
    let v = generic(c);
    assert(v == 5);
}

}
