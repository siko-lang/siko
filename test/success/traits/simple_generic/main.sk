module Main {

struct Foo {

}

trait Bar[T] {
    fn bar(&self) -> ()
}

instance Bar[Foo] {
    fn bar(&self) -> () {

    }
}

fn generic[T: Bar[T]](t: T) {
    t.bar();
}

fn main() {
    let f = Foo();
    f.bar();
    generic(f);
}

}