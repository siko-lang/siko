module Main {

struct Foo[T] {
    genericField: T,
}

trait Bar[T] {
    fn bar(&self) -> ()

    fn defaultbar(&self) -> () {
        self.bar()
    }
}

instance[T: Bar[T]] FooBar Bar[Foo[T]] {
    fn bar(&self) -> () {
        self.genericField.bar();
    }
}

struct Other {

}

instance OtherBar Bar[Other] {
    fn bar(&self) -> () {
    }
}

fn generic[T: Bar[T]](t: T) {
    t.defaultbar();
}

fn main() {
    let f = Foo(Other());
    f.bar();
    f.defaultbar();
    generic(f);
}

}