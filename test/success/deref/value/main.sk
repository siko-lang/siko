module Main {

struct Ptr {
}

instance Deref[Ptr] {
    type Target = Foo
    fn get(&self) -> Foo {
        Foo(Bar())
    }
    
    fn set(&self, value: Foo) {
    }

    fn release(&self) {
    }
}

struct Bar {
}

struct Foo {
    field : Bar
}

instance Clone[Bar] {
    fn clone(&self) -> Bar {
        Bar()
    }
}

instance Copy[Bar]

fn bar (b: Bar) {

}


fn main() {
    let mut p = Ptr();
    bar(p.field);
}

}