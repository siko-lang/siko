module Main {

@derive(Debug, Clone, PartialEq, Eq)
pub enum Type {
    Function(Vec[Type], Type),
    Named(String),
}

pub instance Show[Type] {
    fn show(&self) -> String {
        match self {
            Function(params, ret) -> {
                let params = formatList(params);
                "fn(${params}) -> ${ret}"
            }
            Named(name) -> name.clone(),
        }
    }
}

pub fn formatList[T: Show[T]](items: &Vec[T], sep: String = ", ", begin: String = "", end: String = "") -> String {
    let mut result = String.new();
    let mut first = True;
    for item in items.iter() {
        if !first {
            result = result + sep.clone();
        }
        result = result + item.show();
        first = False;
    }
    "${begin}${result}${end}"
}

fn main() {
    let ty1 = Named("foo");
    println("Type 1: ${ty1}");
}

}