module Main {

enum Pattern {
    Wildcard,
    Guarded(Pattern, Expr),
}

enum Expr {
    Literal,
    Variable,
    Match(Pattern, Expr),
    Binary(Expr, Expr),
}

fn sink(e: Expr) {}

fn main() {
    let e = Binary(Literal, Variable);
    match e {
        Binary(left, right) -> {
            sink(left);
            sink(right);
        }
        _ -> {}
    }
}

}
