module Main {

struct Foo {

}

trait Bar[T] {
    fn new(Int) -> T;
    fn bar1(self) -> ();
    fn bar2(self) -> ();
}

instance Bar List[T]
where
    T: Foo
{

}

instance Bar List[T] {

}

instance[T: Ord] List[T] extends Ord {

}

instance[T: Ord] Foo extends Ord = auto

instance Foo extends IntoIterator<Int> {
    fn next(self) -> Iterator<Int> {
        
    }
}

instance Foo extends Iterator[Int] {
    fn next(self) -> Option<Int> {

    }
}

fn main() {

}

}